@namespace SpeedPainters.UI

@if (!Hud.DisplayedPlayer.IsValid())
{
    return;
}

<root>
    @if (Hud.DisplayedPlayer.CurrentPowerup is not null)
    {
        <label
        @ref=PowerupIcon
        class="icon active"
        style="color: orange; position: absolute; bottom: 100px;">
            @Hud.DisplayedPlayer.CurrentPowerup.Icon
        </label>
    }
    @* Dash is always available on the player *@
    <label
    @ref=DashIcon
    class="icon"
    style="color: linear-gradient(to top, orange @(GetDashPercentage(Hud.DisplayedPlayer))%, black 0%);">
        keyboard_double_arrow_up
    </label>
</root>

@code {
    private Label PowerupIcon { get; set; }
    private Label DashIcon { get; set; }

    @* Extremely hacky solution because linear-gradient fills up the icon completely before 100% is reached. *@
    private double GetDashPercentage(Entities.Player player)
    {
        return Math.Max(player.DashMechanic.ActiveDashPercentage - 22, 0);
    }

    public override void Tick()
    {
        if (!Hud.DisplayedPlayer.IsValid())
            return;

        // Start blinking if we have 3 seconds remaining.
        if (Hud.DisplayedPlayer.CurrentPowerup is not null)
        {
            var isBlinking = Hud.DisplayedPlayer.CurrentPowerup.TimeSinceAdded >= Hud.DisplayedPlayer.CurrentPowerup.ExpiryTime - 3;
            // Wow I can't play two animations at the same time...
            PowerupIcon?.SetClass("active", !isBlinking);
            PowerupIcon?.SetClass("blickerton", isBlinking);
        }

        DashIcon?.SetClass("active", Hud.DisplayedPlayer.DashMechanic.ActiveDashPercentage >= 100);
    }

    protected override int BuildHash()
    {
        if (!Hud.DisplayedPlayer.IsValid())
            return 0;

        var player = Hud.DisplayedPlayer;
        return HashCode.Combine(player.DashMechanic.ActiveDashPercentage, player.CurrentPowerup?.GetHashCode(), player.CurrentPowerup?.Icon.GetHashCode());
    }
}

<style>
    Powerups {
        position: absolute;
        bottom: 300px;
        right: 200px;
        transition: all 200ms ease-in-out;
        flex-direction: column;
        align-items: flex-end;

        .icon {
            font-family: MaterialIcons;
            font-size: 150px;
            text-shadow: 2px 2px 0px black;

            &.blickerton {
                animation-duration: 1s;
                animation-name: blickerton;
                animation-iteration-count: infinite;
            }

            &.active {
                animation-duration: 1s;
                animation-name: bob;
                animation-iteration-count: infinite;
            }
        }
    }

    @@keyframes bob {
        0% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(5);
        }

        100% {
            transform: translateY(0);
        }
    }

    @@keyframes blickerton {
        0% {
            opacity: 1.0;
        }

        50% {
            opacity: 0.3;
        }

        100% {
            opacity: 1;
        }
    }
</style>