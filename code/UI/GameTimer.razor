@namespace SpeedPainters.UI
@{
    if (Game.LocalPawn is not SpeedPainters.Entities.Player player)
        return;
}

<root>
    @{
        <label style="">@(FormatTimer((float)(player.StopWatch)))</label>
    }
</root>

@code {

    private string FormatTimer(float seconds)
    {
        return TimeSpan.FromSeconds(seconds.CeilToInt()).ToString(@"mm\:ss");
    }

    public override void Tick()
    {
        SetClass("bobbing", ParkourPainters.Current.CurrentState is PlayState playState && playState.TimeUntilGameEnds < 30);
    }

    protected override int BuildHash()
    {
        var state = ParkourPainters.Current.CurrentState;
        var playState = state as PlayState;
        var mapVoteState = state as MapVoteState;
        return HashCode.Combine(RealTime.Now);
    }
}

<style>
    GameTimer {
        position: absolute;
        width: 100%;
        bottom: 2px;
        display: flex;
        align-items: center;
        justify-content: center;

        label {
            font-size: 70px;
            color: orange;
            font-family: ADDCN;
            text-shadow: 2px 2px 0px black;
        }

        &.bobbing {
            animation-duration: 1s;
            animation-name: bob;
            animation-iteration-count: infinite;
        }
    }

    @@keyframes bob {
        0% {
            transform: translateY(0) scale(1.05);
        }

        50% {
            transform: translateY(5);
        }

        100% {
            transform: translateY(0);
        }
    }
</style>