@inherits Sandbox.UI.Panel
@namespace SpeedPainters.UI

@if (GameOverState.Instance is null)
{
    return;
}

<root>
    <div class="teams">
        @foreach (var entry in _scores)
        {
            var isWinner = WinningTeams.Contains(entry.Key);
            var teamColor = entry.Key.Group.SprayColor.Hex;
            var percentageScore = GameOverState.Instance.TotalPossibleMapScore == 0 ? 0 : ((float)entry.Value / GameOverState.Instance.TotalPossibleMapScore) * 100;
            <div class="team @(isWinner ? "winner" : "")" style="flex-direction: column; padding: 5px;">
                <div>
                    <label class="title" style="color: @teamColor;">@entry.Key.Group.Name</label>
                    @if (isWinner)
                    {
                        <label style="color: orange; font-family: MaterialIcons;">workspace_premium</label>
                    }
                </div>
                <div class="score" style="border-color: @teamColor;">
                    <div
                    class="fill"
                    style="
                    width: @(percentageScore)%;
                    background-color: @teamColor;" />
                </div>
            </div>
        }
    </div>
</root>

@code {
    private Dictionary<Team, int> _scores = new();
    private List<Team> WinningTeams = new();

    public void AddScore(Team team, int score)
    {
        if (!_scores.ContainsKey(team))
            _scores.TryAdd(team, 0);

        _scores[team] += score;
    }

    @* Whatever gamejam code... *@
    public void ShowWinner()
    {
        var sortedScores = _scores.OrderByDescending(s => s.Value);
        if (sortedScores.Count() == 0)
            return;

        var maxScore = sortedScores.First().Value;
        foreach (var entry in sortedScores)
        {
            if (entry.Value == maxScore)
                WinningTeams.Add(entry.Key);
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GameOverState.Instance?.GetHashCode(), _scores.HashCombine(e => HashCode.Combine(e.Key.GetHashCode(), e.Value.GetHashCode())), WinningTeams?.HashCombine(t => t.GetHashCode()));
    }
}

<style>
    GameResults {
        position: absolute;
        bottom: 100px;
        width: 100%;

        label {
            font-size: 66px;
            font-family: ADDCN;
            text-shadow: 2px 2px 0px black;
        }

        .teams {
            width: 100%;
            justify-content: center;

            .team {
                opacity: 1;
                transition: all 500ms ease-in-out;
                bottom: 100px;
                width: 20%;

                .title {
                    text-overflow: clip;
                    white-space: nowrap;
                }

                .score {
                    height: 50px;
                    border-width: 5px;
                    box-shadow: 3px 3px 10px black;

                    .fill {
                        transition: all 750ms ease-out;
                        height: 100%;
                    }
                }

                &.winner {
                    animation-duration: 1s;
                    animation-name: bob;
                    animation-iteration-count: infinite;
                }

                &:intro {
                    bottom: 50px;
                    opacity: 0;
                }
            }
        }
    }

    @@keyframes bob {
        0% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(5);
        }

        100% {
            transform: translateY(0);
        }
    }
</style>